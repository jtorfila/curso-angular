import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuthClientConfig } from './auth.config';
import { Auth0Client } from '@auth0/auth0-spa-js';
import * as ɵngcc0 from '@angular/core';
export declare class AuthHttpInterceptor implements HttpInterceptor {
    private configFactory;
    private auth0Client;
    constructor(configFactory: AuthClientConfig, auth0Client: Auth0Client);
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    /**
     * Strips the query and fragment from the given uri
     * @param uri The uri to remove the query and fragment from
     */
    private stripQueryFrom;
    /**
     * Determines whether the specified route can have an access token attached to it, based on matching the HTTP request against
     * the interceptor route configuration.
     * @param route The route to test
     * @param request The HTTP request
     */
    private canAttachToken;
    /**
     * Tries to match a route from the SDK configuration to the HTTP request.
     * If a match is found, the route configuration is returned.
     * @param request The Http request
     */
    private findMatchingRoute;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AuthHttpInterceptor, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AuthHttpInterceptor>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5pbnRlcmNlcHRvci5kLnRzIiwic291cmNlcyI6WyJhdXRoLmludGVyY2VwdG9yLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0LCBIdHRwSGFuZGxlciwgSHR0cEV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQXV0aENsaWVudENvbmZpZyB9IGZyb20gJy4vYXV0aC5jb25maWcnO1xuaW1wb3J0IHsgQXV0aDBDbGllbnQgfSBmcm9tICdAYXV0aDAvYXV0aDAtc3BhLWpzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEF1dGhIdHRwSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICAgIHByaXZhdGUgY29uZmlnRmFjdG9yeTtcbiAgICBwcml2YXRlIGF1dGgwQ2xpZW50O1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ0ZhY3Rvcnk6IEF1dGhDbGllbnRDb25maWcsIGF1dGgwQ2xpZW50OiBBdXRoMENsaWVudCk7XG4gICAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcbiAgICAvKipcbiAgICAgKiBTdHJpcHMgdGhlIHF1ZXJ5IGFuZCBmcmFnbWVudCBmcm9tIHRoZSBnaXZlbiB1cmlcbiAgICAgKiBAcGFyYW0gdXJpIFRoZSB1cmkgdG8gcmVtb3ZlIHRoZSBxdWVyeSBhbmQgZnJhZ21lbnQgZnJvbVxuICAgICAqL1xuICAgIHByaXZhdGUgc3RyaXBRdWVyeUZyb207XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgcm91dGUgY2FuIGhhdmUgYW4gYWNjZXNzIHRva2VuIGF0dGFjaGVkIHRvIGl0LCBiYXNlZCBvbiBtYXRjaGluZyB0aGUgSFRUUCByZXF1ZXN0IGFnYWluc3RcbiAgICAgKiB0aGUgaW50ZXJjZXB0b3Igcm91dGUgY29uZmlndXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gcm91dGUgVGhlIHJvdXRlIHRvIHRlc3RcbiAgICAgKiBAcGFyYW0gcmVxdWVzdCBUaGUgSFRUUCByZXF1ZXN0XG4gICAgICovXG4gICAgcHJpdmF0ZSBjYW5BdHRhY2hUb2tlbjtcbiAgICAvKipcbiAgICAgKiBUcmllcyB0byBtYXRjaCBhIHJvdXRlIGZyb20gdGhlIFNESyBjb25maWd1cmF0aW9uIHRvIHRoZSBIVFRQIHJlcXVlc3QuXG4gICAgICogSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIHJvdXRlIGNvbmZpZ3VyYXRpb24gaXMgcmV0dXJuZWQuXG4gICAgICogQHBhcmFtIHJlcXVlc3QgVGhlIEh0dHAgcmVxdWVzdFxuICAgICAqL1xuICAgIHByaXZhdGUgZmluZE1hdGNoaW5nUm91dGU7XG59XG4iXX0=